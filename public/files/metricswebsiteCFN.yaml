AWSTemplateFormatVersion: '2010-09-09'

Description: >
    " 
    - Create the basic foundation for streaming customer audio from Amazon Connect by deploying:
    - S3 Bucket for creating website to display amazon connect realtime metrics using API
    - Dynamo DB tables stores the agent queue and customer information
    - Lambda function copies all the files and creates the default user sjobs

Mappings: 
    FunctionMap:
        Configuration:
            S3Bucket: "accp-2019"
            S3Key: "metrics/latest/"

Parameters:
    S3BucketNameForWebSite:
        Type: String
        Default: "website-enter-bucket-name"
        Description: > 
            Enter the (globally unique) name you would like to use for the Amazon S3 bucket where we will store the website assets. 
            This template will fail to deploy if the bucket name exist.
        AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
            
    realTimeQueueStatsTable:
        Type: String
        Default:  "RealTimeQueueStats"
        Description: >
            The name of the DynamoDB Table where real time queue metrics are stored (Ensure you do not have a table with this name already).

    realTimeAgentStatsTable:
        Type: String
        Default:  "agentStats"
        Description: >
            The name of the DynamoDB Table where real time agents metrics are stored (Ensure you do not have a table with this name already).
            
    customerTable:
        Type: String
        Default:  "CustomerTable"
        Description: >
            The name of the DynamoDB Table where customer information is stored (Ensure you do not have a table with this name already).
    instanceID:
        Type: String
        AllowedPattern: '\w{8}-\w{4}-\w{4}-\w{4}-\w{12}'
        ConstraintDescription: "Invalid Amazon Connect instance Id"
        Description: >
            Amazon Connect Instance ID (Ensure you it is entered accurately in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx ).
            
Outputs:
    realTimeQueueStatsTable:
        Description: >
            The ARN of the DynamoDB table created to store agent info
        Value: !GetAtt realTimeQueueStatsDDBTable.Arn
    realTimeAgentStatsTable:
        Description: >
            The ARN of the DynamoDB table created to store agent info
        Value: !GetAtt realTimeAgentStatsDDBTable.Arn       
    customerTable:
        Description: >
            The ARN of the DynamoDB table created to store agent info
        Value: !GetAtt customerDDBTable.Arn
    IAMRole:
        Description: >
            The IAM Role created for the Lambda Functions in this template
        Value: !Ref lambdaIAMRole
    webSiteLocation:
        Description:  >
            Site can be access with this link.
        Value: !Join
          - ''
          - - 'https://'
            - 's3.amazonaws.com/'
            - !Ref S3BucketNameForWebSite
            - '/metrics/metrics.html'
    apiGatewayInvokeURL:
        Value: !Sub "https://${APIGatewayForMetrics}.execute-api.${AWS::Region}.amazonaws.com/dev/metrics"

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Metrics Website Configuration
        Parameters:
          - S3BucketNameForWebSite
      - Label:
          default: Amazon DynamoDB Table for Queue Metrics
        Parameters:
          - realTimeQueueStatsTable
      - Label:
          default: Amazon DynamoDB Table for Agent Metrics
        Parameters:
          - realTimeAgentStatsTable          
      - Label:
          default: Amazon DynamoDB Configuration for Customer Table
        Parameters:
          - customerTable
      - Label:
          default: Instance Id from the Amazon Connect Console
        Parameters:
          - instanceID
          
    ParameterLabels:
      S3BucketNameForWebSite:
        default: S3 BucketName
      realTimeQueueStatsTable:
        default: DynamoDB Table Name
      realTimeAgentStatsTable:
        default: DynamoDB Table Name
      customerTable:
        default: DynamoDB Table Name
      instanceID:
        default: Instance Id from the Amazon Connect Console
        
Resources:

    createWebSiteS3Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketName: !Ref S3BucketNameForWebSite
            WebsiteConfiguration:
                IndexDocument: metrics.html
                ErrorDocument: error.html
                
    realTimeQueueStatsDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  !Ref realTimeQueueStatsTable
        AttributeDefinitions:
          -
            AttributeName: "queue"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "queue"
            KeyType: "HASH"
        # assuming 5 concurrent calls
        ProvisionedThroughput:
          ReadCapacityUnits:
              1
          WriteCapacityUnits:
              1
        PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: True
        SSESpecification:
            SSEEnabled: True

    realTimeAgentStatsDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  !Ref realTimeAgentStatsTable
        AttributeDefinitions:
          -
            AttributeName: "agentName"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "agentName"
            KeyType: "HASH"
        # assuming 5 concurrent calls
        ProvisionedThroughput:
          ReadCapacityUnits:
              1
          WriteCapacityUnits:
              1
        PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: True
        SSESpecification:
            SSEEnabled: True
            
    customerDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  !Ref customerTable
        AttributeDefinitions:
          -
            AttributeName: "callerID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "callerID"
            KeyType: "HASH"
        # assuming 5 concurrent calls
        ProvisionedThroughput:
          ReadCapacityUnits:
              1
          WriteCapacityUnits:
              1
        PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: True
        SSESpecification:
            SSEEnabled: True
            
    lambdaIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            - arn:aws:iam::aws:policy/CloudWatchFullAccess
            
          Path: "/"
          Policies:
            -
              PolicyName: amz-metrics-policy-ddb-s3-cognito
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                      - "s3:GetObject"
                      - "s3:PutObjectAcl"
                      - "dynamodb:DeleteItem"
                    Resource: "*"
                  -
                    Effect: "Allow"
                    Action:
                      - "cognito-idp:AdminUpdateUserAttributes"
                      - "cognito-idp:AdminConfirmSignUp"
                    Resource: "*"
                  -
                    Effect: "Allow"
                    Action:
                      - "dynamodb:Query"
                      - "dynamodb:Scan"
                      - "dynamodb:PutItem"
                      - "dynamodb:UpdateItem"
                      - "dynamodb:GetRecords"
                      - "dynamodb:GetShardIterator"
                      - "dynamodb:DescribeStream"
                      - "dynamodb:ListStreams"                      
                    Resource: 
                        !Join 
                            - ''
                            - - 'arn:aws:dynamodb:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'table/'
                              - !Ref realTimeQueueStatsTable
                  -
                    Effect: "Allow"
                    Action:
                      - "dynamodb:Query"
                      - "dynamodb:Scan"
                      - "dynamodb:PutItem"
                      - "dynamodb:UpdateItem"
                      - "dynamodb:GetRecords"
                      - "dynamodb:GetShardIterator"
                      - "dynamodb:DescribeStream"
                      - "dynamodb:ListStreams"                      
                    Resource: 
                        !Join 
                            - ''
                            - - 'arn:aws:dynamodb:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'table/'
                              - !Ref customerTable
                  -
                    Effect: "Allow"
                    Action:
                      - "dynamodb:Query"
                      - "dynamodb:Scan"
                      - "dynamodb:PutItem"
                      - "dynamodb:UpdateItem"
                      - "dynamodb:GetRecords"
                      - "dynamodb:GetShardIterator"
                      - "dynamodb:DescribeStream"
                      - "dynamodb:ListStreams"                      
                    Resource: 
                        !Join 
                            - ''
                            - - 'arn:aws:dynamodb:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'table/'
                              - !Ref realTimeAgentStatsTable
                  -
                    Effect: "Allow"
                    Action:
                      - "s3:GetObject"
                    Resource:
                      -  !Join
                          - ''
                          - - 'arn:'
                            - !Ref 'AWS::Partition'
                            - ':s3:::'
                            - 'accp-2019-us-east-1'
                            - '/*'
                  -
                    Effect: "Allow"
                    Action:
                      - "connect:GetMetricData"
                      - "connect:GetCurrentMetricData"
                    Resource:
                      - 
                        !Join 
                            - ''
                            - - 'arn:aws:connect:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'instance/'
                              - !Ref instanceID
                      - 
                        !Join 
                            - ''
                            - - 'arn:aws:connect:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'instance/'
                              - !Ref instanceID
                              - '/*'
                  -
                    Effect: "Allow"
                    Action:
                      - "kinesis:ListStreams"
                      - "kinesis:ListShards"
                    Resource: '*'
                  -
                    Effect: "Allow"
                    Action:
                      - "kinesis:GetShardIterator"
                      - "kinesis:GetRecords"
                      - "kinesis:DescribeStream"
                    Resource:
                        !Join 
                            - ''
                            - - 'arn:aws:kinesis:'
                              - !Ref 'AWS::Region'
                              - ':'
                              - !Ref 'AWS::AccountId'
                              - ':'
                              - 'stream/ConnectAgentsData'


    GetCCMetrics:
      Type: "AWS::Lambda::Function"
      Properties:
        Description:  >
            AWS Lambda Function that will access the data for agent and queue metrics
        Handler: "index.handler"
        Role: !GetAtt lambdaIAMRole.Arn
        Runtime: "nodejs12.x"
        MemorySize: 256
        Timeout: 120
        Environment:
            Variables:
                agentMetrics: !Ref realTimeAgentStatsDDBTable
                customerTable: !Ref customerTable
                queueMetrics: !Ref realTimeQueueStatsDDBTable
        
        Code:
            S3Bucket: !Join ["-", [!FindInMap [FunctionMap, Configuration, S3Bucket], Ref: "AWS::Region"]]
            S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'GetCCMetrics.zip']]

    GetCurrentMetrics:
      Type: "AWS::Lambda::Function"
      Properties:
        Description:  >
            AWS Lambda Function that will generate the metrics for agents and queues
        Handler: "index.handler"
        Role: !GetAtt lambdaIAMRole.Arn
        Runtime: "nodejs12.x"
        MemorySize: 256
        Timeout: 120
        Environment:
            Variables:
                TABLE_NAME: !Ref realTimeQueueStatsDDBTable
                INSTANCEID: !Ref instanceID                
        
        Code:
            S3Bucket: !Join ["-", [!FindInMap [FunctionMap, Configuration, S3Bucket], Ref: "AWS::Region"]]
            S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'GetCurrentMetrics.zip']]

    GetCurrentMetricsScheduleRule: 
      Type: AWS::Events::Rule
      Properties: 
        Description: "ScheduledRule"
        ScheduleExpression: "rate(1 minute)"
        State: "ENABLED"
        Targets: 
          - 
            Arn: 
              Fn::GetAtt: 
                - "GetCurrentMetrics"
                - "Arn"
            Id: "TargetFunctionV1"
    PermissionForEventsToInvokeLambda: 
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: !Ref "GetCurrentMetrics"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: 
          Fn::GetAtt: 
            - "GetCurrentMetricsScheduleRule"
            - "Arn"

    AgentEventStreamToDDB:
      Type: "AWS::Lambda::Function"
      Properties:
        Description:  >
            AWS Lambda Function that will consume the feed from agent kinesis stream and update the states
        Handler: "index.handler"
        Role: !GetAtt lambdaIAMRole.Arn
        Runtime: "nodejs12.x"
        MemorySize: 256
        Timeout: 120
        Environment:
            Variables:
                agentStatsTableName: !Ref realTimeAgentStatsDDBTable
        
        Code:
            S3Bucket: !Join ["-", [!FindInMap [FunctionMap, Configuration, S3Bucket], Ref: "AWS::Region"]]
            S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'AgentEventStreamToDDB.zip']]
            
    webSiteCreator:
      Type: "AWS::Lambda::Function"
      Properties:
        Description:  >
            AWS Lambda Function that will create the website and upload it to the S3 bucket
        Handler: "index.handler"
        Role: !GetAtt lambdaIAMRole.Arn
        Runtime: "nodejs12.x"
        MemorySize: 256
        Timeout: 120
        Code:
            S3Bucket: !Join ["-", [!FindInMap [FunctionMap, Configuration, S3Bucket], Ref: "AWS::Region"]]
            S3Key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'WebSiteHelper.zip']]

    
    invokeWebSiteCreator:
        Type: Custom::CreateWebSite
        DependsOn: createWebSiteS3Bucket
        Properties:  
            ServiceToken:  !GetAtt webSiteCreator.Arn
            bucketName: !Ref S3BucketNameForWebSite
            customAction: configureWebsite
            Region: !Ref AWS::Region
            sourceS3Bucket: !Join ["-", [!FindInMap [FunctionMap, Configuration, S3Bucket], Ref: "AWS::Region"]]
            sourceS3key: !Join ["", [!FindInMap [FunctionMap, Configuration, S3Key], 'website']]
            destS3Bucket: !Ref S3BucketNameForWebSite
            destS3KeyPrefix: metrics
            identityPoolId: !Ref BootCampCognitoIDPool
            userPoolID: !Ref BootcampUserPool
            appClientId: !Ref BootcampUserPoolClient
            apiGatewayURL: !Sub "https://${APIGatewayForMetrics}.execute-api.${AWS::Region}.amazonaws.com/dev/metrics"
            manifestLocation: "metrics/latest/metrics-web-site-manifest.json"
            
    APIGatewayForMetrics:
        Type: AWS::ApiGateway::RestApi
        Properties:
          Name: "metrics-api"  
          Description: "Bootcamp Metrics API"
          
    APIGatewayResourceForMetrics:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        ParentId: !GetAtt APIGatewayForMetrics.RootResourceId
        RestApiId: !Ref APIGatewayForMetrics
        PathPart: 'metrics'
        
    APIGatewayAuthorizerForMetrics:
      Type: 'AWS::ApiGateway::Authorizer'
      Properties:
        AuthorizerResultTtlInSeconds: '300'
        ProviderARNs:
            - !GetAtt BootcampUserPool.Arn 
        AuthorizerUri: !GetAtt BootcampUserPool.Arn 
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.X-Amz-Security-Token
        Name: metricsCognitoApiAuthorizer
        RestApiId: !Ref APIGatewayForMetrics
    
    APIGatewayMethodForMetricsPOST:
        Type: AWS::ApiGateway::Method
        Properties:
          HttpMethod: POST
          AuthorizerId: !Ref APIGatewayAuthorizerForMetrics
          ResourceId: !Ref APIGatewayResourceForMetrics
          RestApiId: !Ref APIGatewayForMetrics
          AuthorizationType: COGNITO_USER_POOLS
          Integration:
            IntegrationHttpMethod: "POST"
            Type: "AWS_PROXY"
            Uri: !Sub
                - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                - lambdaArn: !GetAtt "GetCCMetrics.Arn"          

    APIGatewayMethodForMetricsOPTIONS:
        Type: AWS::ApiGateway::Method
        Properties:
          AuthorizationType: NONE
          RestApiId:
            Ref: APIGatewayForMetrics
          ResourceId:
            Ref: APIGatewayResourceForMetrics
          HttpMethod: OPTIONS
          Integration:
            IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
            PassthroughBehavior: WHEN_NO_MATCH
            RequestTemplates:
              application/json: '{"statusCode": 200}'
            Type: MOCK
          MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: 'Empty'
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: false
                method.response.header.Access-Control-Allow-Methods: false
                method.response.header.Access-Control-Allow-Origin: false
                
    APIGatewayDeployment:
        Type: "AWS::ApiGateway::Deployment"
        DependsOn:
          - "APIGatewayMethodForMetricsOPTIONS"
          - "APIGatewayMethodForMetricsPOST"
        Properties:
          RestApiId: !Ref APIGatewayForMetrics
          StageName: "dev"
          
    lambdaApiGatewayInvoke:
        Type: "AWS::Lambda::Permission"
        Properties:
          Action: "lambda:InvokeFunction"
          FunctionName: !GetAtt "GetCCMetrics.Arn"
          Principal: "apigateway.amazonaws.com"
          SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayForMetrics}/*/POST/metrics"      
          
    SNSRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal: 
                  Service: 
                    - "cognito-idp.amazonaws.com"
                Action: 
                  - "sts:AssumeRole"
          Policies:
            - PolicyName: "bootcamp-userpool-metrics-sns-policy"
              PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - Effect: "Allow"
                    Action: "sns:publish"
                    Resource: "*"            
                    
    BootcampUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
          UserPoolName: !Join 
              - ''
              - - !Ref AWS::StackName
                - "-bootcamp-metrics-user-pool"          
          AutoVerifiedAttributes:
            - phone_number
            - email
          MfaConfiguration: "OFF"
          SmsConfiguration:
             ExternalId: !Sub bootcamp-metrics-external
             SnsCallerArn: !GetAtt SNSRole.Arn
          Policies:
              PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: False
                    RequireNumbers: False
                    RequireSymbols: False
                    RequireUppercase: False
             
    BootcampUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
          ClientName: bootcamp-metrics-client
          GenerateSecret: false
          UserPoolId: !Ref BootcampUserPool
                
    BootCampCognitoIDPool:
        Type: 'AWS::Cognito::IdentityPool'
        Properties:
            AllowUnauthenticatedIdentities: true
            CognitoIdentityProviders: 
                - ClientId: !Ref BootcampUserPoolClient
                  ProviderName: !GetAtt BootcampUserPool.ProviderName            

    BootcampCognitoIDIamRoleAuth:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Federated:
                        - cognito-identity.amazonaws.com
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "authenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref BootCampCognitoIDPool}}
            
            Path: /
            Policies:
                - PolicyName: bootcamp-metrics-cognito-identity-authenticated
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      -
                        Effect: "Allow"
                        Action:
                          - "dynamodb:Query"
                          - "dynamodb:Scan"
                          - "dynamodb:PutItem"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:GetRecords"
                          - "dynamodb:GetShardIterator"
                          - "dynamodb:DescribeStream"
                          - "dynamodb:ListStreams"                      
                          - "dynamodb:DeleteItem"
                        Resource: 
                            !Join 
                                - ''
                                - - 'arn:aws:dynamodb:'
                                  - !Ref 'AWS::Region'
                                  - ':'
                                  - !Ref 'AWS::AccountId'
                                  - ':'
                                  - 'table/'
                                  - !Ref realTimeQueueStatsTable
                        
                      -
                        Effect: "Allow"
                        Action:
                          - "cognito-sync:DescribeIdentityPoolUsage"
                          - "cognito-sync:QueryRecords"
                          - "cognito-sync:DescribeDataset"
                          - "cognito-sync:GetIdentityPoolConfiguration"
                          - "cognito-sync:ListIdentityPoolUsage"
                          - "cognito-sync:ListRecords"
                          - "cognito-sync:DescribeIdentityUsage"
                          - "cognito-sync:ListDatasets"
                          - "cognito-sync:GetCognitoEvents"                          
                        Resource: "*"
                      - Effect: Allow
                        Action:
                          - 'mobileanalytics:PutEvents'
                        Resource: '*'

    BootcampCognitoIDIamRoleUnAuth:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Principal:
                      Federated:
                        - cognito-identity.amazonaws.com
                    Action:
                      - 'sts:AssumeRoleWithWebIdentity'
                    Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "unauthenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref BootCampCognitoIDPool}}
            
            Path: /
            Policies:
                - PolicyName: bootcamp-ae-cognito-identity-authenticated
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                      - Effect: Allow
                        Action:
                          - 'mobileanalytics:PutEvents'
                        Resource: '*'
                        
    BootcampCognitoIDIamRoleAttachment:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref BootCampCognitoIDPool
            Roles: {"authenticated": !GetAtt BootcampCognitoIDIamRoleAuth.Arn, "unauthenticated": !GetAtt BootcampCognitoIDIamRoleUnAuth.Arn}

