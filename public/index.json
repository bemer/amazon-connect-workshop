[
{
	"uri": "/",
	"title": "Amazon Connect Workshop",
	"tags": [],
	"description": "",
	"content": "Amazon Connect Workshop Amazon Connect is an easy to use omnichannel cloud contact center that helps companies provide superior customer service at a lower cost. In this workshop, we will take you through all the steps needed to built and manage your own cloud contact center with Amazon Connect with a multi-tenant AWS account infrastructure.\n  Report an issue   Contact Event Outfitters   Learn more  "
},
{
	"uri": "/integrate_with_lex/configure_connect_instance/",
	"title": "Configure the Amazon Connect instance",
	"tags": [],
	"description": "",
	"content": "In order to be able to connect the Amazon Connect instance with the Amazon Lex chatbot, the first step is for you to add the Lex bot in the Contact Flows configuration of your Connect Instance. This step basically provides the right permissions so the Connect instance can interact with the Lex bot.\nTo do so, click in you Amazon Connect instance on the Amazon Connect console and there, navigate to the Contact flows on the left menu:\nIn this screen, under Amazon Lex, select the bot named CableTvSupport that we just created and click in + Add Lex Bot:\nYou will see a message saying that the Lex Bot was succesfully added and it will be listed under the Lex bots list:\nAfter doing this, you can go back to your Amazon Connect instance dashboard to configure the Call Flow that will redirect calls to the Lex bot.\n"
},
{
	"uri": "/start_the_workshop/create_a_connect_instance/",
	"title": "Create an Amazon Connect Instance",
	"tags": [],
	"description": "",
	"content": "In this module we are going to create an Amazon Connect Instance that we will use through out the remainder of the workshop. Open the AWS management console, select the appropriate region, and navigate to the Amazon Connect console. If this is the first time launching a Connect Instance you will see a Get Started page. Click on the button Get Started.\nWhen selecting a region review the Amazon Connect Pricing Page to determine which region will have telephone numbers available for the countries you are supporting with your Contact Center.\nWhen configuring an Amazon Connect Instance you will need to configure 4 key elements.\n Identity Administrator Account Telephony Options Data and Storage  In this workshop we are going to select SAML 2.0 based authentication for our Amazon Connect Instance. This feature enables you to use your organiztions existing Identity Provider for authentication.\nOnce you choose your Identity management system and create the Instance this configuration cannot be changed. Carefully plan your identity managment design before creating your Instance. As a best practice we recommend using SAML integration for identity management.\n Select the radio button for SAML 2.0-based authentication and the fill in the Access URL box with a name for your Instance. The name must be unique and cannot be changed after configuration of the Instance is complete. In this example we are using aws-connect-workshop-123, and you can use the same convention just append a random 4 digit number to the end of the name:\nNext we will configure an Administrator Account that can be used for accessing the Amazon Connect Console. Provide the First Name, Last Name, and User Name for the admin user. Note that the login is case sensitive. Click Next Step:\nNow we will configure Telephony Options for your Connect Instance. Amazon Connect offers the ability to accept inbound calls, make outbound calls, or both. We will leave the default here to allow both incoming and outbound calls. Click Next Step:\nNow we will configure Data Storage Options for Amazon Connect. Amazon Connect uses Amazon S3 to store data such as Call Recordings, Chat Transcripts, and Reports. Amazon Connect uses CloudWatch to store log data:\nClick Customize Settings: on the Data storage condfiguration page. This will bring up the default storage configuration for the Instance and allow you customize the settings. It is important to understand the configuration. You can customize if needed for your deployment, but for the workshop we will use the default. Click Next Step\nNote that in this screen you will be able to pick different KMS keys to encrypt call recordings, chat transcripts and exported reports. By default, it uses the aws/connect key but customers can bring their own KMS keys for encryption.\n In the next page, we will review the configuration settings for our Instance. Click Create Instance to start the provioning of your Amazon Connect instance:\nOnce the Instance is created your will see the following page. Click Get Started\nYou will be brought the Amazon Connect console. Click Lets Go to begin configuring your Connect Instance.\nMake sure to click Allow on the browser window requesting access to your microphone.\n After clicking the Lets Go button you will be brought to the Connect Claim a Phone Number page. On this page you can select a phone number for your Instance. You have 3 options when choosing a number\n Country Type Direct Dial or Toll Free Phone Number  Select a number for the appropriate country, use a direct dial number, and pick a phone number from the list.\nIf you do not see a number you require for your production Instance open a Support Request with AWS support to check on the availability of numbers you are looking for. This could be for example a certain area code where you do business.\n After selecting your phone number, click in Next\nIt might take a couple of minutes for the new number to be configured in your Instance. The next screen is going to show you the number to call and show the Contact Control Panel embedded in the page. The Contact Control Panel is the Agents interface to handle incoming Contacts.\nCall the number you requested from your mobile phone. You will be sent to the default sample Contact Flow. Press 1 to be placed in queue for an agent. Press 1 again to move to the front of the queue and press 1 to go in Queue. You will get a notification within the Contact Control Panel that you have an incoming call. Press the Green Check button to accept the contact.\nYou are now connected to your customer and have made your first call through your Amazon Connect Instance. This is the first step in delivering on your Customer Experience goals. Now we will head to configuring your Connect Contact Center.\nPress the Continue button. This will bring you to the Amazon Connect Dashboard.\nThe Connect Admin guide is a useful resource that can help you through out the workshop. official documentation.\n "
},
{
	"uri": "/deploy_chatbot/deploy_backend/",
	"title": "Deploy the CloudFormation templates",
	"tags": [],
	"description": "",
	"content": "In order to get the Lex Chatbot working properly, we have to deploy the appropriate Lambda Functions and DynamoDB tables. In this workshop we will simulate a Cable TV company that allows customers to call and talk about technical problems. After the customer start talking to the bot, there are a few different options available:\n If the customer has a problem with a single or a just a few channels, the call is transferred to an agent; If the customer has a problem with all the TV channels, the chatbot will schedule a technical visit; If the customer ask for information about the visit, the chatbot provides it; If the customer wants to cancel or reschedule the technical visit, the bot will do it.  Start downloading the zip file that contains the Lambda function code and the CloudFormation templates. You will find it in this link.\nAfter extracting the file locally, you will see two folder: one is named code-s3 and another one named Stack. We will be using both of them.\nNow, access the CloudFormation console and in this screen click in the Create Stack button on the right top corner, and select the option With new resources:\nYou will have to deploy the stack named CreateBucket.yaml. To do so, select the option Upload a template file and select the file CreateBucket.yaml that is available on the Stack folder and click in Next:\nFor the Stack Name enter CableTv-Demo-Bucket-Stack and click in Next again:\nIn the next screen, click in Next and then in Create Stack. You will see a stack being created. When the stack creation finishes, you will be able to see a bucket name in the Outputs session. Note that this is a ramdonly generated number. Take note of this name:\nAfter obtaining the bucket name, you should upload the Python scripts present on the code-S3 folder to it. You can do it by using your terminal and the awscli or via the Amazon S3 console:\nNow, it is time for us to deploy the next CloudFormation template, that will deploy the Lambda Functions, DynamoDB Tables and IAM Roles needed for the environment. On the CloudFormation console, click again on Create Stack, select the option With new resources, pick the Upload a template file option again and this time, make sure you select the file named CableTV-Infra.yaml and click in Next:\nFor Stack Name type CableTv-Demo-Infra-Stack and for the BucketName add the name of the bucket that was created by the previous stack. In my case it was *cabletv-demo-bucket-stack-lambdazipsbucket-1gede3t0yoxvh:\nAfter filling these fields, click in Next, Next again and select the field under Capabilities that says I acknowledge that AWS CloudFormation might create IAM resources with custom names. before clicking in Create stack:\nIt will take a couple of minutes for your stack to be created and when it is finished, you will be able to see all the resources that were created under the Resources tab on the CloudFormation console:\nNow that you have the infrastructure created, you can go ahead and provision your Lex chatbot.\n"
},
{
	"uri": "/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Amazon Connect Welcome to the Amazon Connect Workshop!\nThe intent of this workshop is to educate users about the features and usage of Amazon Connect.\nThis chapter will introduce you to the basic workings of Amazon Connect, laying the foundation for the hands-on portion of the workshop.\nSpecifically, we will walk you through the following topics:\n What is Amazon Connect   "
},
{
	"uri": "/introduction/what_is_amazon_connect/",
	"title": "What is Amazon Connect",
	"tags": [],
	"description": "",
	"content": "Amazon Connect is an omnichannel cloud contact center. You can set up a contact center in a few steps, add agents who are located anywhere, and start engaging with your customers.\nYou can create personalized experiences for your customers using omnichannel communications. For example, you can dynamically offer chat and voice contact, based on such factors as customer preference and estimated wait times. Agents, meanwhile, conveniently handle all customers from just one interface.\nAmazon Connect is an open platform that you can integrate with other enterprise applications, such as Salesforce. In addition, you can take advantage of the AWS ecosystem to innovate new experiences for your customers.\nThe following diagram shows these key characteristics of Amazon Connect:\n"
},
{
	"uri": "/integrate_with_lex/configure_queues_and_routing/",
	"title": "Configure Queues and Routing Profiles",
	"tags": [],
	"description": "",
	"content": "The next step after adding the Lex bot to the Amazon Connect instance is to configure the Queues and the Routing Profile so the agent previously created will be able to receive calls and chat messages.\nLet\u0026rsquo;s start by creating two different queues: CheckSchedule and TvSignalProblem. To do so, on the left menu click on Queues under the Routing menu:\nOn the queues screen, click in Add new queue button on the top right corner of the screen. For the name, type CheckSchedule, add a description, select Basic Hours under Hours of operation and pick the Outbound caller ID number. When finishing, click in Add new queue button:\nAfter adding the CheckSchedule queue, click in the Add new queue button and execute the same steps to create the TvSignalProblem queue.\nWhen both queues are created, it is time to create the Routing Profile. Click in the Routing profiles menu under Routing and then on the button Add new profile. On the Add new routing profile screen, name it CableTvSupport, add a description and make sure you add both the TvSignalProblem and the CheckSchedule queue. Also, pick the TvSignalProblem as the Default outbound queue. When finishing, click in the Add new profile buttom on the top right corner:\nNow that the queues and the routing profile are created, let\u0026rsquo;s get back and assign it to the agent1 user so it will be able to receive calls and chat interactions. To do so, go back to the User management screen, select the agent1 user and click in Edit on the top right corner. Replace the Basic Routing Profile with the CableTvSupport that you just created and click in Save:\nIf you have created more agents in the Create Connect Agents chapter, make sure you replace the routing profile in all of them, otherwise they won\u0026rsquo;t be receiving any calls or chat interactions.\n Now that your routing configurations are in place, you can go ahead and create the proper call flows that will send calls to the Lex bot and to the agent.\n"
},
{
	"uri": "/deploy_chatbot/deploy_lex_chatbot/",
	"title": "Deploy the Lex Chatbot",
	"tags": [],
	"description": "",
	"content": "After deploying the infrastructure with Lambda Functions and DynamoDB tables that will be used by the chatbot, it is time to deploy the chatbot itself. Start by downloading the zip file from this link.\nAfter downlinad the file, navigate to the Amazon Lex console and on this screen, click in Actions and than in Import:\nHere, select the CableTvLexChatbot.zip file and click in Import:\nAfter importing the Lex chatbot, we will need to change a few configurations and point it to use the Lambda functions that we just deployed. To do so, click in the chatbot CableTvSupport:\nOn the Editor tab, click in the ManageSchedule intent and under Fullfilment select AWS Lambda function and finally pick the function named CableTv-ManageTechVisitSchedule. When selecting the function, there will be a new window saying that you are about to provide permissions so the chatbot will be able to call the function on your behalf. Just click OK. After picking the right function, go ahead, and click in Save intent:\nAfter picking the Lambda Function for the ManageSchedule intent, let\u0026rsquo;s do the same for the SignalLost and the VisitSchedule intents. Make sure you\u0026rsquo;re picking the following:\n SignalLost intent: select the CableTv-ValidateCustomerId function VisitSchedule intent: select the CableTv-ScheduleTechVisit function  Make sure you click on the Save Intent button after picking the Lambda function for each intent.\n After picking the three functions, it is time for us to build and publish our chatbot. Start by clicking in the button Build on the top right corner of the screen. A message will be presented saying that you can continue editing your bot while the build process is in progress. You can just click on Build.\nAfter finishing your build process, it is time for you to click in the Publish button. When doing it, you will be asked to create an alias. Typo demo_environment and click in the Publish button. When the publish process is finished, you can just click in Close and start testing your environment:\n"
},
{
	"uri": "/start_the_workshop/saml_configuration/",
	"title": "Federation with AWS SSO and Amazon Connect",
	"tags": [],
	"description": "",
	"content": "Federation with AWS Single Sign-On and Amazon Connect In this Chapter, we will guide you through the process of congigurating the AWS SSO as the Identity Provider for the previouly created Amazon Connect instance.\n"
},
{
	"uri": "/start_the_workshop/",
	"title": "Start the workshop...",
	"tags": [],
	"description": "",
	"content": "Getting started "
},
{
	"uri": "/start_the_workshop/saml_configuration/configure_aws_sso_for_agents/",
	"title": "Configure the AWS SSO for Agents",
	"tags": [],
	"description": "",
	"content": "In this module we are going to enable the AWS Single Sign-On (SSO) and configure it as the identity provider for our Amazon Connect Instance.\nNote that for the purpose of this workshop we will be leveraging the AWS SSO as the identity provider to authenticate our users in the Amazon Connect instance, but you can use different tools as stated in the documentation.\n The first step is to enable the AWS SSO. To do so, access the AWS SSO console. In this page, you can click in the Enable AWS SSO button:\nAWS SSO requires the AWS Organizations service. To get everything up and running, you should now click in Create AWS organization. It will create an AWS Organization and setup the AWS SSO for you:\nAfter creating your Organization and setting up the AWS SSO, you will be redirected to the AWS SSO main page:\nLet\u0026rsquo;s now add the Amazon Connect integration. To do so, you should click in Applications in the left side menu, and then click in the Add a new application button:\nNote that you can leverage AWS SSO to handle the authentication for multiple applications. When implementing Amazon Connect, it is a best practice that you create two different applications: one for your Connect agents and another one for the Amazon Connect instance administrators. During this workshop, we will demonstrate how to provision the application that will be used by the connect agents.\n In the search box, type Amazon Connect. It will find the Amazon Connect app. You can then click in the application logo and then in the Add application button to move to the application configuration page:\nIn this page, name your application Amazon Connect - Agent and make sure that you download the AWS SSO SAML metadata file. You will find a download link just in the AWS SSO Metadata section. After downloading the metadata file, go ahead and change the Relay state field under Application Properties. In this box, please insert the following, making sure that you replace the data with the right AWS region and your Amazon Connect instance ID:\nhttps://\\\u0026lt;region-id\u0026gt;.console.aws.amazon.com/connect/federate/\\\u0026lt;instance-id\u0026gt;?destination=%2Fconnect%2Fccp  You can find information about the Connect instance ID in the Amazon Connect console when clicking in your connect instance. It is the last part of the Instance ARN. In my case, the ARN is:\narn:aws:connect:us-east-1:257804509653:instance/9690dd9b-3de7-4097-b4d9-67829f7c8fur  It means that the Connect instance ID will be:\n9690dd9b-3de7-4097-b4d9-67829f7c8fur  That being said, since I am running the worshop in us-east-1, the URL I\u0026rsquo;ll add to the Relay state field will be:\n https://us-east-1.console.aws.amazon.com/connect/federate/9690dd9b-3de7-4097-b4d9-67829f7c8fur?destination=%2Fconnect%2Fccp  After downloading the metadata file and changing the Relay state URL field, keep all the rest as default and click in Save changes:\n"
},
{
	"uri": "/start_the_workshop/saml_configuration/configure_the_iam/",
	"title": "Configure the IAM IdP",
	"tags": [],
	"description": "",
	"content": "After configuring the AWS SSO, it is time to get back to the IAM and create an Identity provider and proper IAM Policy and IAM Role. The IAM identity provider is used to configure AWS SSO as an IdP for SAML 2.0 federation while the IAM policy and role are used for the directory users to assume an IAM role and access an Amazon Connect instance.\nIn the IAM console, in the Identity providers menu, click in the button Create Provider:\nAs the Provider Type, select SAML, give it the name of AmazonConnectAgentAccess and upload the AWS SSO metadata file that you downloaded before from the AWS SSO page:\nClick in Next Step and than in Create.\nAfter creating the Identity Provider, it is time to create a new IAM Policy. To do so, access the IAM Policies console and click in Create Policy. In this page, switch to the JSON tab and past the following code, replacing the connect instance ARN with your current instance ARN:\n{ \u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;, \u0026quot;Statement\u0026quot;: [ { \u0026quot;Sid\u0026quot;: \u0026quot;Statement1\u0026quot;, \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: \u0026quot;connect:GetFederationToken\u0026quot;, \u0026quot;Resource\u0026quot;: [ \u0026quot;\u0026lt;connect instance ARN\u0026gt;/user/${aws:userid}\u0026quot; ] } ] }  After updating the JSON content, click in Review policy. Name your policy AmazonConnectSSOPolicy and click in Create policy.\nNow, let\u0026rsquo;s create an IAM Role that will be used by the federated users so they can access the Amazon Connect instance. You can click in this link to access the IAM Roles menu. Once in the Roles screen, click in the button Create role. For the Role type, in the top menu, you should select SAML 2.0 federation and use the following configurations:\n For SAML provider select AmazonConnectAgentAccess Choose Allow programmatic and AWS Management Console access  After picking the right configuration, click in Permissions:\nIn the Attach permissions policies menu, you should select AmazonConnectSSOPolicy. You can use the search to filter for this policy. After selecting the policy, click in Next: Tags:\nIn the Add tags (optional) scree, just click in Next: Review. Name your role AmazonConnectAgentAccessRole and click in Create role.\nAfter creating your role, take note of the IAM role ARN. You use it later while configuring the AWS SSO application. For example:\narn:aws:iam::\u0026lt;account id without hyphen\u0026gt;:role/AmazonConnectAgentAccessRole  After creating the Identity Provider, IAM policy and IAM Role, it is time to get back to the AWS SSO an nao the attribute values.\nSome service providers require custom SAML assertions to pass additional data about your user sign-ins. In that case, use the following procedure to specify how your applications user attributes should map to corresponding attributes in AWS SSO. You can find more information about it in the official documentation.\n Get back to the AWS SSO console and, under the Applications menu, select the application called Amazon Connect that we created previously. There, you should select the tab Attribute mappings and add a new attribute mapping with the following information:\nAttribute: https://aws.amazon.com/SAML/Attributes/Role Value: \u0026lt;IAM role ARN\u0026gt;,\u0026lt;IAM identity provider ARN\u0026gt;  The Value field will be similar to:\narn:aws:iam::123456789012:role/AmazonConnectAgentAccessRole,arn:aws:iam::123456789012:saml-provider/AmazonConnectAgentAccess  After adding the new attribute, click in Save changes:\n"
},
{
	"uri": "/start_the_workshop/saml_configuration/create_connect_agents/",
	"title": "Create Connect agents",
	"tags": [],
	"description": "",
	"content": "After configuring the SSO, it is time to go ahead and create the firt Amazon Connect agents. With the SSO setup, users are created and defined in the Connect instance but all the password management will happen through the SSO. Let\u0026rsquo;s then create a few Connect users and see how this integration looks like.\nThe first step here is to access your Amazon Connect instance with your administrator account (that we created in the previous lab) and create a new user. To do so, visit the Amazon Connect console and click in the Access URL. You will be taken to the Amazon Connect management portal. In this dashboard, click in the User management menu in the left side:\nIn the new screen, click in Add new users buton in the top right corner:\nThere are mainly two options to create users in the Amazon Connect instance: manually and upload a template with multiple users. For our workshop purposes, we are going to create two different agents, named agent1 and agent2, so go ahead in click in the In the Add new users button on the top right corner of the User management screen, make sure that the option Create and set up a new user. is selected and click in Next:\nEnter Agent for the First Name and 1 for the last name. Enter agent1@connect-workshop.com for the Login Name. After adding this information, select the Basic Routing Profile as the Routing Profile and Agent as the Security Profiles. When finishing it, click in the Save button on the bottom of the page:\nOn the following scree, just click in the Create users button:\nNow that we have the agent1 already created in the Amazon Connect instance, it is time to provision it in the SSO. To do so, access the AWS SSO console and under the Users menu click in the Add User button. Then, add information about the new user. Make sure that you are using the same email address that you used when creating the user in the Connect instance.\nBy default, when creating a new user in SSO, the Amazon SSO Service will send an email to the user\u0026rsquo;s email address with login information and asking for a new password. Given that in this workshop we are not using a valid domain name, make sure you are selecting the option Generate a one-time password that you can share with the user before creating the user.\n After filling all the fields, click in the button Next: Groups on the bottom of the page. To make our life easier, let\u0026rsquo;s go ahead and create a new group that will allow us to assign the users with the proper permissions on our Amazon Connect instance. To do so, click in the Create group button and type ConnectAgents as the Group name. Add a description about it, and click in Create:\nThe user will be created and you will be able to obtain the generated password by clicking in the Show password option. Make sure you copy this field, because it will be used when trying to login via the SSO configuration:\nAfter creating the user and the group, you should get back to the Connect application created in the SSO and allow access to it. To do so, click in the Applications menu on the SSO page and click in the Amazon Connect application. There, navigate to the Assigned users tab and click in the button Assign users:\nNow, select the Groups tab, select the ConnectAgents group and click in the button Assign users:\nBy selecting the group there, it will be easier for you to add more agents in your Connect instance in the future, so you don\u0026rsquo;t need to assign every individual user to the Connect application created on the AWS SSO.\nRepeat the steps to as many users you want in both the Amazon Connect instance and the SSO.\nAfter creating the users, you should be able to access the SSO interface with them. To get the login URL, please go to the AWS SSO console. You will find the SSO portal URL under User portal.\nNote that during the first login, a password change will be asked. After changing the password and logging in the system, the agents will be able to see the Amazon Connect application:\nWhen clicking in the Connect application, you will be redirected to the Connect agent interface and will be able to start receiving and answering calls.\n"
},
{
	"uri": "/start_the_workshop/saml_configuration/configure_aws_sso_for_admins/",
	"title": "Configure the AWS SSO for Admins",
	"tags": [],
	"description": "",
	"content": "After creating a SSO application that will be used by your agents, it is time to create another application that will provide access to the Connect admin console. We will be repeating the previous steps with a couple of changes.\nStart by acessing the AWS SSO applications page and adding a new application. Click in the Add application button, select Amazon Connect and click in the Add application buton again.\nName this application Amazon Connect - Admin, download the metadata file available in the AWS SSO Metadata section and in the Relay state field you should add the following URL:\nhttps://\u0026lt;region-id\u0026gt;.console.aws.amazon.com/connect/federate/\u0026lt;instance-id\u0026gt;  Note that this URL is different from the previous one, where it provides access to the Amazon Connect administrator dashboard instead of redirecting the users to the softfone interface. Make sure you are replacing the \u0026lt;region-id\u0026gt; and the \u0026lt;intance-id\u0026gt; with your information.\nAfter downloading the metadata file and changing the Relay state URL field, click in Save changes.\nNow, access the AWS IAM console, click in Identity providers on the left menu and create a new provider by clicking in the Create provider button.\nFor the provider type, select SAML, name it AmazonConnectAdminAccess, upload the most recent metadata file and click in Next step:\nAfter validating the information, click in Create.\nNow, access the AWS IAM Roles page and click in the button Create role to create the role that will be used by the new SSO application. In this screen, select SAML 2.0 federation as the Role type and make sure you select the AmazonConnectAdminAccess SAML provider. Select Allow programmatic and AWS Management Console access and click in the Next Permissions button:\nIn the following screen, select the AmazonConnectSSOPolicy policy and click in Next tags. On the tags screen, click in Next review.\nName your role AmazonConnectAdminAccessRole and click in Create role.\nAfter creating the IAM Role, access the AWS SSO applications page and click in the Amazon Connect - Admin application. In the application page, select the Attribute mappings tab and create a new attribute with the following content:\nAttribute: https://aws.amazon.com/SAML/Attributes/Role Value: \u0026lt;IAM role ARN\u0026gt;,\u0026lt;IAM identity provider ARN\u0026gt;  The Value field will be similar to:\narn:aws:iam::123456789012:role/AmazonConnectAdminAccessRole,arn:aws:iam::123456789012:saml-provider/AmazonConnectAdminAccess  After changing this information, click in the Save changes button.\n"
},
{
	"uri": "/start_the_workshop/saml_configuration/create_admin_user/",
	"title": "Create the Connect Admin",
	"tags": [],
	"description": "",
	"content": "No that you already have the SSO Application for the admin user, let\u0026rsquo;s go ahead and create the first admin user that we will be using during the workshop. Access your Amazon Connect instance using the link available in the Amazon Connect console.\nIn case you\u0026rsquo;re not able to login with the first user, because you have enabled the SSO, you can click in your connect instance name and use the Emergency access link. This will provide you admin access to your Amazon Connect instance with an Admin profile. Please note that we don\u0026rsquo;t recommend you to use this link in your day-to-day operations.\n After logging in, click in the User management menu on the left side and then click in the Add new users button. Proceed to create a new user and use Admin for the first name, User for the last name and admin-user@amazon-connect-workshop.com as the login name.\nMake sure you select Basic Routing Profile as the Routing Profile and Admin as the Security Profile:\nClick in Save and then in the Create users button.\nAfter creating the admin user in Connect, get back to the AWS SSO page so we can provision the user there as well.\nStart by creating a group named ConnectAdmins. To do so, in the SSO page, click in Groups in the left menu and then click in Create group:\nIn the next screen, name your group ConnectAdmins, add a description and click in Create:\nNow, get back to the SSO Users screen and create a new user. Make sure you are using the same email address that you have used when creating your user in Amazon Connect and to select the Generate a one-time password that you can share with the user option.\nYou can then assign the admin user to the Admin group and then click in Add user:\nMake sure you store the user password for the admin user.\nAfter creating the user and group, it is time to assign the group to the Amazon Connect admin application. To do so, click in the Applications menu on the left page of the SSO screen and then click in the Amazon Connect - Admin application. There, click in the tab Assigned users and then in the button Assign users:\nIn the next screen, click in the tab Groups and then select the ConnectAdmins group. After selecting it, click in the Assign users button. When logging with the admin user in the SSO URL, you should be able to see the Amazon Connect admin application:\n"
},
{
	"uri": "/integrate_with_lex/configure_call_flow/",
	"title": "Configure the Amazon Connect contact flow",
	"tags": [],
	"description": "",
	"content": "After adding the bot to the Amazon Connect instance, it is time to configure the Contact Flow, so your calls can be handled by the Lex bot. To do so, access your Amazon Connect dashboard - you can do this by using your SSO administration login.\nTo make your life easier, insted of creating a contact flow from the scratch, you can just go ahead and download the provided Cable TV Contact flow.\nOn the Amazon Connect dashboard, on the left menu, click in Contact Flows:\nNow, click in the Create contact flow option on the top right corner of the screen:\nOn the New contact flow page, click on the menu located on the right top of the pace and select the option Import flow (beta). Than, select the CableTvContactFlow.json file that you just downloaded:\nSince the contact flow was generated in another account and possibly in a different region, make sure that you double click in the Get customer input block and select the proper Lex bot before moving forward:\nAfter selecting the right Lex bot, click on the Save button and after in the Publish, both on the top right corner of the Edit contact flow screen:\nNow that your Contact Flow is properly created, it is time to associate it with the Phone Number that was previously obtained. To do so, under the Routing menu, click in Phone Numbers:\nYou phone number will be exhibted in this screen. Click in it, and under the Contact flow/IVR option, select the Cable TV Contact Flow. After picking the right one, you can go ahead and click in Save:\n"
},
{
	"uri": "/deploy_chatbot/",
	"title": "Deploying the Lex Chatbot",
	"tags": [],
	"description": "",
	"content": "Deploying the Lex Chatbot In this chapter, we are going to deploy the backend for the Lex chatbot that will be used by the Amazon Connect instance.\n"
},
{
	"uri": "/deploy_chatbot/testing_the_lex_chatbot/",
	"title": "Testing the Lex Chatbot",
	"tags": [],
	"description": "",
	"content": "Now that you have deployed the chatbot, it is time to test it. The first thing we will need is to add some customer data in the CableTvCustomers DynamoDB table. To do so, go to the DynamoDB console and click in the CableTvCustomers table. On the table page, click in the Create Item button:\nOn the Create Item page, insert the following JSON document (remember to replace the data with your name and your phone number):\n{ \u0026quot;customerId\u0026quot;: \u0026quot;1235\u0026quot;, \u0026quot;CustomerPhone\u0026quot;: \u0026quot;+551196540004\u0026quot;, \u0026quot;CustomerSince\u0026quot;: \u0026quot;2019-02-01\u0026quot;, \u0026quot;TvPlan\u0026quot;: \u0026quot;Gold\u0026quot;, \u0026quot;CustomerName\u0026quot;: \u0026quot;Bruno Emer\u0026quot; }  And click in Create Item:\nAfter creating the Item on the DDB table, get back to the Amazon Lex console amd click in the Test Chatbot option, located on the right side of the screen:\nAfter scheduling a new technical visit, take a look in your cellphone. If everything went well, you should have received an SMS text telling you about the technical visit.\nIn the test window, you can start a conversation with your chatbot. You can use the following script to test it out:\nNow, you can check if your technical visit was properly schedule, so follow the next script:\nAnd if you want, feel free to reschedule or cancel it:\nNow that we have the chatbot properly deployed, it is time to move forward and configure the Amazon Connect instance, so your clients will be able to interact with the Chatbot using voice.\n"
},
{
	"uri": "/integrate_with_lex/",
	"title": "Integrate Connect with Lex",
	"tags": [],
	"description": "",
	"content": "Integrate Amazon Connect with Amazon Lex In this chapter, we will integrate the Amazon Connect instance with the Amazon Lex chatbot so your clients will be able to interact with the Chabot by using their phones.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Thanks to our wonderful contributors for making Open Source a better place! Please go to Contributors page to checkout authors for this Workshop\n"
},
{
	"uri": "/more_resources/",
	"title": "More Resources",
	"tags": [],
	"description": "",
	"content": "Discover more AWS resources for building and running your application on AWS:\nMore Workshops  Amazon ECS Workshop - Learn how to use Stelligent Mu to deploy a microservice architecture that runs in AWS Fargate Amazon Lightsail Workshop - If you are getting started with the cloud and looking for a way to run an extremely low cost environment Lightsail is perfect. Learn how to deploy to Amazon Lightsail with this workshop.  Tools for AWS Fargate and Amazon ECS  Containers on AWS - Learn common best-practices for running containers on AWS   fargate - Command line tool for interacting with AWS Fargate. With just a single command you can build, push, and launch your container in Fargate, orchestrated by ECS. Wonqa is a tool for spinning up disposable QA environments in AWS Fargate, with SSL enabled by Let\u0026rsquo;s Encrypt. More details about Wonqa on the Wonder Engineering blog coldbrew - Fantastic tool that provisions ECS infrastructure, builds and deploys your container, and connects your services to an application load balancer automatically. Has a great developer experience for day to day use mu - Automates everything relating to ECS devops and CI/CD. This framework lets you write a simple metadata file and it constructs all the infrastructure you need so that you can deploy to ECS by simply pushing to your Git repo.  Courses  Microservices with Docker, Flask, and React - Learn how to build, test, and deploy microservices powered by Docker, Flask, React Amazon ECS!  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]